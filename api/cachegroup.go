// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	null "gopkg.in/guregu/null.v3"
	"time"
)

type Cachegroup struct {
	Id                 int64      `db:"id" json:"id"`
	Name               string     `db:"name" json:"name"`
	ShortName          string     `db:"short_name" json:"shortName"`
	Latitude           null.Float `db:"latitude" json:"latitude"`
	Longitude          null.Float `db:"longitude" json:"longitude"`
	ParentCachegroupId null.Int   `db:"parent_cachegroup_id" json:"parentCachegroupId"`
	Type               int64      `db:"type" json:"type"`
	LastUpdated        time.Time  `db:"last_updated" json:"lastUpdated"`
}

func handleCachegroup(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getCachegroup(id)
	} else if method == "POST" {
		return postCachegroup(payload)
	} else if method == "PUT" {
		return putCachegroup(id, payload)
	} else if method == "DELETE" {
		return delCachegroup(id)
	}
	return nil, nil
}

func getCachegroup(id int) (interface{}, error) {
	if id >= 0 {
		return getCachegroupById(id)
	} else {
		return getCachegroups()
	}
}

// @Title getCachegroupById
// @Description retrieves the cachegroup information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup/{id} [get]
func getCachegroupById(id int) (interface{}, error) {
	return genericGetById(id, "cachegroup", (*Cachegroup)(nil))
}

// @Title getCachegroups
// @Description retrieves the cachegroup information for a certain id
// @Accept  application/json
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup [get]
func getCachegroups() (interface{}, error) {
	return genericGet("cachegroup", (*Cachegroup)(nil))
}

// @Title postCachegroup
// @Description enter a new cachegroup
// @Accept  application/json
// @Param                 Name json     string   false "name description"
// @Param            ShortName json     string   false "short_name description"
// @Param             Latitude json    float64    true "latitude description"
// @Param            Longitude json    float64    true "longitude description"
// @Param   ParentCachegroupId json        int    true "parent_cachegroup_id description"
// @Param                 Type json      int64   false "type description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cachegroup [post]
func postCachegroup(payload []byte) (interface{}, error) {
	return genericPost(payload, "cachegroup", (*Cachegroup)(nil))
}

// @Title putCachegroup
// @Description modify an existing cachegroupentry
// @Accept  application/json
// @Param                 Name json     string   false "name description"
// @Param            ShortName json     string   false "short_name description"
// @Param             Latitude json    float64    true "latitude description"
// @Param            Longitude json    float64    true "longitude description"
// @Param   ParentCachegroupId json        int    true "parent_cachegroup_id description"
// @Param                 Type json      int64   false "type description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/cachegroup [put]
func putCachegroup(id int, payload []byte) (interface{}, error) {
	return genericPut(id, payload, "cachegroup", (*Cachegroup)(nil))
}

// @Title delCachegroupById
// @Description deletes cachegroup information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Cachegroup
// @Resource /api/2.0
// @Router /api/2.0/cachegroup/{id} [delete]
func delCachegroup(id int) (interface{}, error) {
	return genericDelete(id, "cachegroup")
}
