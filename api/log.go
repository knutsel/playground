// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	null "gopkg.in/guregu/null.v3"
	"time"
)

type Log struct {
	Id          int64       `db:"id" json:"id"`
	Level       null.String `db:"level" json:"level"`
	Message     string      `db:"message" json:"message"`
	TmUser      int64       `db:"tm_user" json:"tmUser"`
	Ticketnum   null.String `db:"ticketnum" json:"ticketnum"`
	LastUpdated time.Time   `db:"last_updated" json:"lastUpdated"`
}

func handleLog(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getLog(id)
	} else if method == "POST" {
		return postLog(payload)
	} else if method == "PUT" {
		return putLog(id, payload)
	} else if method == "DELETE" {
		return delLog(id)
	}
	return nil, nil
}

func getLog(id int) (interface{}, error) {
	if id >= 0 {
		return getLogById(id)
	} else {
		return getLogs()
	}
}

// @Title getLogById
// @Description retrieves the log information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Log
// @Resource /api/2.0
// @Router /api/2.0/log/{id} [get]
func getLogById(id int) (interface{}, error) {
	return genericGetById(id, "log", (*Log)(nil))
}

// @Title getLogs
// @Description retrieves the log information for a certain id
// @Accept  application/json
// @Success 200 {array}    Log
// @Resource /api/2.0
// @Router /api/2.0/log [get]
func getLogs() (interface{}, error) {
	return genericGet("log", (*Log)(nil))
}

// @Title postLog
// @Description enter a new log
// @Accept  application/json
// @Param                Level json     string    true "level description"
// @Param              Message json     string   false "message description"
// @Param               TmUser json      int64   false "tm_user description"
// @Param            Ticketnum json     string    true "ticketnum description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/log [post]
func postLog(payload []byte) (interface{}, error) {
	return genericPost(payload, "log", (*Log)(nil))
}

// @Title putLog
// @Description modify an existing logentry
// @Accept  application/json
// @Param                Level json     string    true "level description"
// @Param              Message json     string   false "message description"
// @Param               TmUser json      int64   false "tm_user description"
// @Param            Ticketnum json     string    true "ticketnum description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/log [put]
func putLog(id int, payload []byte) (interface{}, error) {
	return genericPut(id, payload, "log", (*Log)(nil))
}

// @Title delLogById
// @Description deletes log information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Log
// @Resource /api/2.0
// @Router /api/2.0/log/{id} [delete]
func delLog(id int) (interface{}, error) {
	return genericDelete(id, "log")
}
