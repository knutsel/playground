// Copyright 2015 Comcast Cable Communications Management, LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was initially generated by gen_goto2.go (add link), as a start
// of the Traffic Ops golang data model

package api

import (
	_ "github.com/Comcast/traffic_control/traffic_ops/goto2/output_format" // needed for swagger
	null "gopkg.in/guregu/null.v3"
	"time"
)

type Federation struct {
	Id          int64       `db:"id" json:"id"`
	Cname       string      `db:"cname" json:"cname"`
	Description null.String `db:"description" json:"description"`
	Ttl         int64       `db:"ttl" json:"ttl"`
	LastUpdated time.Time   `db:"last_updated" json:"lastUpdated"`
}

func handleFederation(method string, id int, payload []byte) (interface{}, error) {
	if method == "GET" {
		return getFederation(id)
	} else if method == "POST" {
		return postFederation(payload)
	} else if method == "PUT" {
		return putFederation(id, payload)
	} else if method == "DELETE" {
		return delFederation(id)
	}
	return nil, nil
}

func getFederation(id int) (interface{}, error) {
	if id >= 0 {
		return getFederationById(id)
	} else {
		return getFederations()
	}
}

// @Title getFederationById
// @Description retrieves the federation information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Federation
// @Resource /api/2.0
// @Router /api/2.0/federation/{id} [get]
func getFederationById(id int) (interface{}, error) {
	return genericGetById(id, "federation", (*Federation)(nil))
}

// @Title getFederations
// @Description retrieves the federation information for a certain id
// @Accept  application/json
// @Success 200 {array}    Federation
// @Resource /api/2.0
// @Router /api/2.0/federation [get]
func getFederations() (interface{}, error) {
	return genericGet("federation", (*Federation)(nil))
}

// @Title postFederation
// @Description enter a new federation
// @Accept  application/json
// @Param                Cname json     string   false "cname description"
// @Param          Description json     string    true "description description"
// @Param                  Ttl json      int64   false "ttl description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federation [post]
func postFederation(payload []byte) (interface{}, error) {
	return genericPost(payload, "federation", (*Federation)(nil))
}

// @Title putFederation
// @Description modify an existing federationentry
// @Accept  application/json
// @Param                Cname json     string   false "cname description"
// @Param          Description json null.String    true "description description"
// @Param                  Ttl json      int64   false "ttl description"
// @Success 200 {object}    output_format.ApiWrapper
// @Resource /api/2.0
// @Router /api/2.0/federation [put]
func putFederation(id int, payload []byte) (interface{}, error) {
	return genericPut(id, payload, "federation", (*Federation)(nil))
}

// @Title delFederationById
// @Description deletes federation information for a certain id
// @Accept  application/json
// @Param   id              path    int     false        "The row id"
// @Success 200 {array}    Federation
// @Resource /api/2.0
// @Router /api/2.0/federation/{id} [delete]
func delFederation(id int) (interface{}, error) {
	return genericDelete(id, "federation")
}
